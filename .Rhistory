getwd()
library(shiny)
runExample("01_hello")
getwd()
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runExample("02_text")       # tables and data frames
runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
sidebarPanel(
div("First div"),
div("Second div")
)
# Make the cropping datafile for the required season ---------------------------
season <- 2022
# what crop on field a at date d?
d <- paste0(season, "-06-30")
# Setup -----------------------------------------------------------------
setwd("C:/Users/00758120/Documents/GitHub/haumap02")
source("code/functions/PackageCheck_F.R")
# Read data in --------------------------
filename <- "data/arable_usage_full_2022_01_18.csv"
#filename <- "C:/Users/00758120/OneDrive - Harper Adams University/RProjects/FarmData/arable_usage_full_2022_01_18.csv"
X <- read.csv(filename)
View(X)
# restrict the cropping info from Sumit to no earlier than
X$Date <- as.Date.character(X$Date, format = c("%d/%m/%Y"))
X <- X[X$Date >= "2020-01-01",] # earliest date
# Setup -----------------------------------------------------------------
setwd("C:/Users/00758120/Documents/GitHub/haumap02")
source("code/functions/PackageCheck_F.R")
source("code/functions/Standardize.R")
#setwd(r'(C:\Users\00758120\Harper Adams University\George Wager - farm-data)')
# install and load required packages for the session
libs = c("stringr", "openxlsx", "data.table", "readxl", "rgdal", "sf", "raster", "broom", "leaflet", "htmlwidgets")
PackageCheck(libs)
# Location of source files
shpdir <- paste0(getwd(), "/data/harper-farm-boundaries") # shapefiles
croptypes <- read.csv("input/crop_colors.csv") # crop colors
# Make the cropping datafile for the required season ---------------------------
season <- 2022
source("code/CROPPING.R")
# Put the shapefiles together ----------------------------------------------------
file_list <- dir(shpdir, pattern = ".shp", full.names = TRUE)
# read all the shape files and store as a list
shapefile_list <- lapply(file_list, read_sf, as_tibble = T)
# Look to make sure they're all in the same CRS
s <- unique(unlist(sapply(shapefile_list, st_crs)))
cat(s)
getwd()
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("haumap02"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# sliderInput("Season",
#             "(Year:)",
#             min = 2020,
#             max = 2023,
#             value = 2023),
#
selectInput("season",
label = "Choose the harvest year to display on the map",
choices = c("2020",
"2021",
"2022",
"2023"),
selected = "2023")
),
# Show a plot of the generated distribution
mainPanel(
htmlOutput("haumap")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$haumap <- renderImage({
season <- input$season
source("code/Map_setup.R")
})
}
# Run the application
shinyApp(ui = ui, server = server)
getwd()
source("code/Map_setup.R")
runApp()
source("code/Map_setup.R")
source("code/Map_setup.R")
map
haumap <- source("code/Map_setup.R")
View(haumap)
View(map)
runApp()
getwd()
runApp()
runApp()
runApp()
traceback()
?switch
season
getwd()
season <- input$season
?selectInput
# Setup -----------------------------------------------------------------
#setwd("C:/Users/00758120/Documents/GitHub/haumap02")
source("code/functions/PackageCheck_F.R")
source("code/functions/Standardize.R")
#setwd(r'(C:\Users\00758120\Harper Adams University\George Wager - farm-data)')
# install and load required packages for the session
libs = c("shiny", "stringr", "openxlsx", "data.table", "readxl", "rgdal", "sf", "raster", "broom", "leaflet", "htmlwidgets")
PackageCheck(libs)
# Location of source files
shpdir <- paste0(getwd(), "/data/harper-farm-boundaries") # shapefiles
croptypes <- read.csv("input/crop_colors.csv") # crop colors
# Put the shapefiles together ----------------------------------------------------
file_list <- dir(shpdir, pattern = ".shp", full.names = TRUE)
# read all the shape files and store as a list
shapefile_list <- lapply(file_list, read_sf, as_tibble = T)
# Look to make sure they're all in the same CRS
s <- unique(unlist(sapply(shapefile_list, st_crs)))
cat(s) # exploratory - remove
#cat(s) # exploratory - remove
# Combine the list of sf objects into a single object (rbind.sf())
all_fields <- do.call(what = sf:::rbind.sf, args=shapefile_list)
runApp()
View(X)
runApp()
runApp()
runApp()
haumap <- source("code/Map_crops.R")
runApp()
runApp()
runApp()
?source
runApp()
runApp()
# Setup -----------------------------------------------------------------
#setwd("C:/Users/00758120/Documents/GitHub/haumap02")
source("code/functions/PackageCheck_F.R")
source("code/functions/Standardize.R")
#setwd(r'(C:\Users\00758120\Harper Adams University\George Wager - farm-data)')
# install and load required packages for the session
libs = c("shiny", "stringr", "openxlsx", "data.table", "readxl", "rgdal", "sf", "raster", "broom", "leaflet", "htmlwidgets")
PackageCheck(libs)
# Location of source files
shpdir <- paste0(getwd(), "/data/harper-farm-boundaries") # shapefiles
croptypes <- read.csv("input/crop_colors.csv") # crop colors
# Put the shapefiles together ----------------------------------------------------
file_list <- dir(shpdir, pattern = ".shp", full.names = TRUE)
# read all the shape files and store as a list
shapefile_list <- lapply(file_list, read_sf, as_tibble = T)
# Look to make sure they're all in the same CRS
s <- unique(unlist(sapply(shapefile_list, st_crs)))
#cat(s) # exploratory - remove
# Combine the list of sf objects into a single object (rbind.sf())
all_fields <- do.call(what = sf:::rbind.sf, args=shapefile_list)
# Shiny app -----------------------------------------------------
# Define UI for application
ui <- fluidPage(
# Application title
titlePanel("haumap02"),
# Sidebar with a select input for the year
sidebarLayout(
sidebarPanel(
selectInput(inputId = "season",
label = "Choose the harvest year to display on the map",
choices = c("2020",
"2021",
"2022",
"2023"),
selected = "2023")
),
# Show the map in the main panel
mainPanel(
textOutput("haumap")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$haumap <- renderText({
season <- input$season
haumap <- paste0(season, "-06-30")
source("code/CROPPING.R", local = TRUE)
haumap <- source("code/Map_crops.R")
})
}
# Run the application
shinyApp(ui = ui, server = server)
traceback()
runApp()
runApp()
# Map of crop types -----------------------------------------------------------------
mycol <- croptypes$CropColor[match(all_fields$CROP_TYPE, croptypes$CropType)]
View(all_fields)
runApp()
source("C:/Users/00758120/Documents/GitHub/haumap02/code/functions/Cropping_F.R")
runApp()
runApp()
runApp()
runApp()
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
?renderLeaflet
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Setup -----------------------------------------------------------------
#setwd("C:/Users/00758120/Documents/GitHub/haumap02")
source("code/functions/PackageCheck_F.R", local = TRUE)
runApp()
?mainPanel
runApp()
?leaflet
runApp()
runApp()
runApp()
?baseGroups
addLayersControl()
?addLayersControl
source("code/functions/Cropping_F.R")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='pdolowy',
token='90819EF3C6CFD49ABD22A2FEA14E5C3A',
secret='wkGCc/mhvs0s1Fer58LxImEjrB1QWtKpfSMu7B0y')
getwd
getwd()
deployApp()
getwd()
deployApp()
deployApp()
runApp()
runApp()
?install.packages
runApp()
